// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Member {
  id            Int      @id @default(autoincrement())
  email         String   @unique(map: "email") @db.VarChar(255)
  name          String   @db.VarChar(100)
  gender        String   @db.VarChar(15)
  birth         DateTime @db.Date
  address       String   @db.VarChar(255)
  detailAddress String?  @map("detail_address") @db.VarChar(255)
  points        Int      @default(0)

  UserFavorCategory UserFavorCategory[]
  review Review[]
  memberMission MemberMission[]

  @@map("member")
}

model FoodCategory {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(100)

  userFavorCategories UserFavorCategory[]

  @@map("food_category")
}

model UserFavorCategory {
  id             Int          @id @default(autoincrement())
  member         Member       @relation(fields: [memberId], references: [id])
  memberId       Int          @map("member_id")
  foodCategory   FoodCategory @relation(fields: [foodCategoryId], references: [id])
  foodCategoryId Int          @map("food_category_id")

  @@index([foodCategoryId], map: "food_category_id")
  @@index([memberId], map: "member_id")
  @@map("preferrenceof_food")
}

model Region {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(20)

  store Store[]

  @@map("region")
}

model Store {
  id              Int           @id @default(autoincrement())
  name            String        @db.VarChar(100)
  longtitude      Float         @db.Double
  latitude        Float         @db.Double
  region          Region        @relation(fields: [regionId], references: [id])
  regionId        Int           @map("region_id")
  roadAddress     String?       @map("road_address") @db.VarChar(255)
  numberAddress   String?       @map("number_address") @db.VarChar(255)
  detailAddress   String?       @map("detail_address") @db.VarChar(255)
  reviewNum       Int           @map("review_num")
  starPoint       Float         @map("star_point")

  review Review[]
  mission Mission[]

  @@index([regionId], map: "region_id")
  @@map("store")
}

model Mission {
  id              Int           @id @default(autoincrement())
  cond            Int           
  reward          Int
  deadline        DateTime      @db.Date
  store           Store         @relation(fields: [storeId], references: [id])
  storeId         Int           @map("store_id")

  memberMission MemberMission[]

  @@index([storeId], map: "store_id")
  @@map("mission")
}

enum MissionStatus {
  COMPLETE
  INCOMPLETE
}

model MemberMission {
  id              Int           @id @default(autoincrement())
  state           MissionStatus @default(INCOMPLETE)        
  updatedAt       DateTime      @updatedAt
  member          Member        @relation(fields: [memberId], references: [id])
  memberId        Int           @map("member_id")
  mission         Mission       @relation(fields: [missionId], references: [id])
  missionId       Int           @map("mission_id")

  @@index([memberId], map: "member_id")
  @@index([missionId], map: "mission_id")  
  @@map("member_mission")
}

model Review {
  id              Int           @id @default(autoincrement())
  description     String        @db.VarChar(300)
  starPoint       Int           @map("star_point")
  member          Member        @relation(fields: [memberId], references: [id])
  memberId        Int           @map("member_id")
  store           Store         @relation(fields: [storeId], references: [id])
  storeId         Int           @map("store_id")

  @@index([memberId], map: "member_id")
  @@index([storeId], map: "store_id")
  @@map("review")
}